export function escape(n){return new RegExp(n.replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&"),"m")}export function source(n){return n?"string"==typeof n?n:n.source:null}export function lookahead(n){return concat("(?=",n,")")}export function anyNumberOfTimes(n){return concat("(",n,")*")}export function optional(n){return concat("(",n,")?")}export function concat(...n){return n.map(n=>source(n)).join("")}export function either(...n){return"("+n.map(n=>source(n)).join("|")+")"}export function countMatchGroups(n){return new RegExp(n.toString()+"|").exec("").length-1}export function startsWith(n,t){const e=n&&n.exec(t);return e&&0===e.index}export function join(n,t="|"){const e=/\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;let r=0,o="";for(let c=0;c<n.length;c++){r+=1;const u=r;let i=source(n[c]);for(c>0&&(o+=t),o+="(";i.length>0;){const n=e.exec(i);if(null==n){o+=i;break}o+=i.substring(0,n.index),i=i.substring(n.index+n[0].length),"\\"===n[0][0]&&n[1]?o+="\\"+String(Number(n[1])+u):(o+=n[0],"("===n[0]&&r++)}o+=")"}return o}